// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL") // Make sure DATABASE_URL is set in your .env file
}

// Enum for different user roles
enum Role {
  ADMIN
  SELLER
  BUYER
}

// User model
model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String        @unique
  password      String
  role          Role          @default(BUYER)
  listings      Listing[]     @relation("UserListings")
  purchases     Transaction[] @relation("BuyerTransactions")
  sales         Transaction[] @relation("SellerTransactions")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// Listing model (represents a product or service being sold)
model Listing {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  price       Float
  category    String
  seller      User          @relation("UserListings", fields: [sellerId], references: [id])
  sellerId    String        @db.ObjectId
  sold        Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  transactions Transaction[] // A listing can have many transactions (sales)
}

// Transaction model (represents a transaction between buyer and seller)
model Transaction {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  listing     Listing   @relation(fields: [listingId], references: [id])
  listingId   String    @db.ObjectId
  buyer       User      @relation("BuyerTransactions", fields: [buyerId], references: [id])
  buyerId     String    @db.ObjectId
  seller      User      @relation("SellerTransactions", fields: [sellerId], references: [id])
  sellerId    String    @db.ObjectId
  commission  Float     // Commission for the platform or seller
  totalAmount Float     // Total amount of the transaction
  status      String    @default("pending") // Transaction status: pending, completed, cancelled
  createdAt   DateTime  @default(now())
}

// Session model (represents an active session for the user)
model Session {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  expires     DateTime
  sessionToken String   @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
